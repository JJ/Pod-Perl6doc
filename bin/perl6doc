#!/usr/bin/env perl6
use v6;

my class Cache {
    has $!dir = %*ENV<HOME> ~ "/.perl6doc";
    method !key($file is copy, $section?) {
        $file ~~ s:i:g/<-[a..z0..9.]>/_/;
        if $section {
            $file ~= ".$section";
        }
        "$!dir/$file";
    }
    method get([$file, $section?]) {
        my $key = self!key($file, $section);
        if $key.IO.e {
            if $file.IO.modified <= $key.IO.modified {
                return $key;
            } else {
                $key.IO.unlink;
            }
        }
        return;
    }
    method set([$file, $section?], Str:D $content) {
        my $key = self!key($file, $section);
        my $d = $key.IO.dirname;
        unless $d.IO.d {
            require Shell::Command;
            GLOBAL::Shell::Command::EXPORT::DEFAULT::<&mkpath>($d);
        }
        $key.IO.spurt: $content;
        $key;
    }
    method compute([$file, $section?], &cb) {
        my $get = self.get([$file, $section]);
        return $get if $get;
        my $content = &cb();
        self.set([$file, $section], $content);
    }
}

my class PerlFile {
    has $!module;
    has $.pod;
    has $.pm;
    submethod BUILD(:$module) {
        my $path = (-> $_ { .subst(:g, '::', '/') })($module);
        for @*INC -> $inc is copy {
            next unless $inc ~~ Str;
            $inc ~~ s/^.*\#//;
            my @found = (
                <pm6 pm pod>.map({"$inc/$path.$_"}).Slip,
                "$inc/Type/$path.pod",
                "$inc/Language/$path.pod",
            ).grep({.IO.r});
            next unless @found;
            if @found.grep(/pod$/) -> @f {
                # prefer *.pod for pod
                $!pod = @f[0];
            } else {
                $!pod = @found[0];
            }
            $!pm = @found[0];
            last;
        }
    }
    method found() { so $!pm }
}

multi sub MAIN(Str $module is copy, Bool :$l, Bool :$m) {
    my $section;
    if $module ~~ s/\. (\S+) $// {
        $section = $/[0].Str;
    }
    my $perl-file = PerlFile.new(:$module);
    if $perl-file.found {
        if $l {
            say $perl-file.pm;
        } elsif $m {
            with-pager($perl-file.pm);
        } else {
            my $render = $section ?? "SectionFilterPodPerl6doc" !! "TextPodPerl6doc";
            my $cache-file = Cache.new.compute: [$perl-file.pod, $section], {
                temp %*ENV;
                %*ENV<PERL6_POD_HEADING> = $section if $section;
                qqx/$*EXECUTABLE --doc=$render {$perl-file.pod}/;
            };
            if $cache-file.IO.z {
                my $arg = $section ?? "$module.$section" !! $module;
                note qq/File exists, but no documentation found for "$arg"./;
                exit 1;
            }
            with-pager($cache-file);
        }
    } else {
        my $message = $m ?? qq/No module found for "$module"./
                         !! qq/No documentation found for "$module"./;
        note $message;
        exit 1;
    }
}

sub USAGE() {
    require Pod::To::Text;
    say ::("Pod::To::Text").render($=pod);
}

sub with-pager($file) {
    my $pager = $*ENV<PAGER>:exists ?? $*ENV<PAGER> !! "less";
    temp %*ENV;
    %*ENV<LESS> = %*ENV<LESS>:exists ?? "%*ENV<LESS> -R" !! "-R" if $pager ~~ /less$/;
    run $pager, $file;
}

=begin pod

=head1 SYNOPSIS

  > perl6doc [OPTIONS] MODULE

  OPTIONS:
  -l  Display the module's file name
  -m  Display module's file in its entirety
  -h  Show this help

  EXAMPLES:
  > perl6doc File::Find
  > perl6doc -m Panda::Builder
  > perl6doc -l Pod::To::Text

  # for perl6/doc content
  > perl6doc Proc::Async
  > perl6doc 5to6-perlfunc

  > perl6doc Str.chars  # you can see a document for a specified method.

=end pod
